
<html>
<head>
<topictype value="TOPIC"/>
<title>More About MENUHIT</title>
<LINK rel="stylesheet" type="text/css" href="templates/wwhelp.css">
<SCRIPT SRC="templates/wwhelp.js"></SCRIPT>
</head>
<body leftmargin=0 topmargin=0>

<table border=0 width="100%" bgcolor="lightblue" class="banner" cellspacing="3">
<tr><td valign="center">
<span class="projectname">New Property/Method Dialog Replacement</span>
</td></tr><tr><td>
<span class="topicname">More About MENUHIT
</span>
</td></tr>
</table>

<div class="contentpane">
<br>One slight complication: what if you have a script that does something cool and so does someone else, and you want to use both of them? The problem is that there can only be one MENUHIT record (if more than one is present, VFP will use the first one in the IntelliSense table). For this reason, the sample dialog that installs the replacement dialog uses some generic code for MENUHIT. This code delegates to something else rather than perform the desired IDE customization directly. It does this in two ways. First, it looks for another record in the IntelliSense table with TYPE = "M" (which stands for "menu") and ABBREV containing the name of the selected menu item. If it finds such a record, it executes the code in the DATA memo field. If a record is not found, it then looks for a program whose name is stored in the TIP field (which is empty by default but you could put the name of a program in there if desired) and executes that program if it's found. Here's the code:<p><pre>LPARAMETERS toParameter
LOCAL lnSelect, lcCode, llReturn, lScriptHandled
TRY

  * First try FoxCode lookup for Type="M" records
  lnSelect = SELECT()
  SELECT 0
  USE (_FOXCODE) AGAIN SHARE ORDER 1
  IF SEEK('M' + PADR(UPPER(toParameter.MenuItem), ;
    LEN(ABBREV)))
    lcCode = DATA
  ENDIF
  USE
  SELECT (lnSelect)
  IF NOT EMPTY(lcCode)
    llReturn = EXECSCRIPT(lcCode, toParameter)
    lScriptHandled=.T.
  ENDIF
  
  * Handle by passing to external routine as
  * specified in Tip field
  IF !lScriptHandled
    lcProgram = ALLTRIM(toParameter.Tip)
    IF FILE(lcProgram)
      DO (lcProgram) WITH toParameter,llReturn
    ENDIF
  ENDIF
  
  * Custom script successful so let's disable native
  * behavior
  IF llReturn
    toParameter.ValueType = 'V'
  ENDIF
CATCH
ENDTRY
RETURN llReturn</pre><p>There are a few interesting things about this code. First, normally you'd use ORDER &lt;tag name&gt; rather than ORDER &lt;n&gt; to set the order for a table. However, the IntelliSense table is unusual: if you open the table and use ATAGINFO() to retrieve information about the indexes for this table, you'll see that there are two tags, both marked as primary and both without tag names. So, you have to use ORDER 1 or ORDER 2 to set the order for this table. The second thing is that the code is wrapped in a TRY structure to prevent any errors, such as problems opening the table or errors that may exist in the code in the other record. The third issue is that this code doesn't check for the prompt of the pad the user's menu selection is from, only the bar prompt. That's because Microsoft decided to do a SEEK for performance reasons and the tag used is UPPER(TYPE + ABBREV). Since this is a small table, they could probably get away with putting the pad prompt into the EXPANDED column and using LOCATE FOR TYPE = "M" AND ABBREV = toParameter.MenuItem AND EXPANDED = toParameter.UserTyped to ensure the exact record is found if you wish.<p>In addition to this record, the sample dialog installs two other records with TYPE = "M", one with ABBREV set to "NEW METHOD..." and the other with "NEW PROPERTY..." in ABBREV. These records contain nearly the same code in DATA, which brings up the replacement dialog when the appropriate menu function is selected. Here's the code for the New Method record (in place of &lt;path&gt; will be the directory where you installed NewPropertyDialog.APP):<p><pre>LPARAMETERS toParameter
LOCAL llReturn, ;
  llMethod, ;
  llClass
TRY
  llMethod = toParameter.MenuItem  = 'New Method...'
  llClass  = toParameter.UserTyped = 'Class'
  RELEASE _oNewProperty
  PUBLIC _oNewProperty
  _oNewProperty = NEWOBJECT('NewPropertyDialog', ;
    'NewProperty.vcx', ;
    '&lt;path&gt;\NewPropertyDialog.APP', llMethod, llClass)
  _oNewProperty.SHOW()
  llReturn = .T.
CATCH
ENDTRY
RETURN llReturn</pre><br>
<br>

<p>
</div>
<hr>
<small>Last Updated: <i>12/30/2008</i></small>
</body>
</html>