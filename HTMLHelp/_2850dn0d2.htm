
<html>
<head>
<topictype value="TOPIC"/>
<title>PropertyEditor.PRG</title>
<LINK rel="stylesheet" type="text/css" href="templates/wwhelp.css">
<SCRIPT SRC="templates/wwhelp.js"></SCRIPT>
</head>
<body leftmargin=0 topmargin=0>

<table border=0 width="100%" bgcolor="lightblue" class="banner" cellspacing="3">
<tr><td valign="center">
<span class="projectname">New Property/Method Dialog Replacement</span>
</td></tr><tr><td>
<span class="topicname">PropertyEditor.PRG
</span>
</td></tr>
</table>

<div class="contentpane">
<br>Because much of the work in editing a property is the same from one editor to the next, this project includes a framework for property editors. The starting point is PropertyEditor.PRG; specify this program as the property editor in the Member Data for properties. PropertyEditor.PRG accepts as parameters the name of the editor and optionally the property the editor will edit.<p>PropertyEditor.PRG doesn't do very much; it simply instantiates and calls the appropriate class for the specified editor name. Editor classes are registered in PropertyEditors.DBF, a simple table in the same directory as the PRG with ID, NAME, CLASS, and LIBRARY columns.<p>Here's the Member Data for some of the properties in the Test class in Test.VCX. The lTest property, which contains a logical value, specifies the Toggle editor. (Note: you'll likely need to specify the path to PropertyEditor.PRG but that's been excluded in these samples for simplicity.)<p><pre>&lt;memberdata name="ltest"
type="property" display="lTest"
script="do PropertyEditor with 'Toggle', 'lTest'"/&gt;</pre><p>nTest contains numeric values between 1 and 3, so it also specifies Toggle but uses custom lowvalue and highvalue attributes to specify the range of values.<p><pre>&lt;memberdata name="ntest"
type="property" display="nTest"
script="do PropertyEditor with 'Toggle', 'nTest'"
lowvalue="1" highvalue="3"/&gt;</pre><p>cStatus specifies the status of an invoice: I means invoiced, P means posted, and V means voided. Since these are enumerated values, cStatus uses the Enumerated editor and its custom editorvalues attribute provides a list of the values in the format "value, description to display; value, description to display; etc."<p><pre>&lt;memberdata name="cstatus"
type="property" display="cStatus"
script="do PropertyEditor with 'Enumerated',
'cStatus'"
editorvalues="I,Invoiced;P,Posted;V,Voided"/&gt;</pre><p>PropertyEditor.PRG begins by opening PropertyEditors.DBF if necessary, looking for the specified name in the NAME column, and if found, instantiating the class specified in the CLASS and LIBRARY columns. Note that it uses TEXTMERGE() on LIBRARY, so you can specify a library in the VFP home directory using "HOME() + 'LibraryName.VCX'." Also, if a path isn't specified, PropertyEditor.PRG looks for the library in the same directory it's in. After instantiating the class, PropertyEditor.PRG calls the editor's EditProperty method to do the work.<p><pre>lparameters tuEditorName, ;
  tcProperty
local lcDirectory, ;
  lcLibrary, ;
  loEditor

* Determine the directory we're running in.

lcDirectory = addbs(justpath(sys(16)))

* Create the specified editor, handling the cases
* where it isn't specified or isn't registered.

do case
  case not vartype(tuEditorName) $ 'CN' or ;
    empty(tuEditorName)
    messagebox('Must specify editor name.', 48, ;
      'Property Editor')
    return
  case not OpenEditorsTable(lcDirectory)
    return
  case (vartype(tuEditorName) = 'C' and ;
    seek(upper(tuEditorName), 'PropertyEditors', ;
    'Name')) or (vartype(tuEditorName) = 'N' and ;
    seek(tuEditorName, 'PropertyEditors', 'ID'))
    lcLibrary = textmerge(PropertyEditors.Library)
    if not file(lcLibrary)
      lcLibrary = forcepath(lcLibrary, lcDirectory)
    endif not file(lcLibrary)
    if file(lcLibrary)
      loEditor = newobject(PropertyEditors.Class, ;
        lcLibrary)
    else
      messagebox('The library specified for ' + ;
        transform(tuEditorName) + ;
        ' cannot be located.', 48, 'Property Editor')
      return
    endif file(lcLibrary)
  otherwise
    messagebox(transform(tuEditorName) + ;
      ' is not a registered editor.', 48, ;
      'Property Editor')
    return
endcase
use in PropertyEditors

* If a property name was specified (for example, for
* an editor that can work with several properties),
* set the cProperty property of the editor to it.

if vartype(tcProperty) = 'C' and not empty(tcProperty)
  loEditor.cProperty = tcProperty
endif vartype(tcProperty) = 'C' ...

* Tell the editor to do its thing.

loEditor.EditProperty()</pre>
<br>

<p>
</div>
<hr>
<small>Last Updated: <i>12/30/2008</i></small>
</body>
</html>